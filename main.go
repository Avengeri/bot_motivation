package main

import (
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
	"log"
	"os"
	"strings"
	"time"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–ø–∏—Ö–Ω—É—Ç—å –∏—Ö –≤–æ –≤—Å–µ —â–µ–ª–∏
var gBot *tgbotapi.BotAPI
var gChatId int64

var gUserInChat Users
var gUsefulActivities = Activities{
	{"Yoga", "–ô–æ–≥–∞ (15 –º–∏–Ω—É—Ç)", 1},
	{"Book", "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (15 –º–∏–Ω—É—Ç)", 1},
	{"Walk", "–ü—Ä–æ–≥—É–ª–∫–∞ (15 –º–∏–Ω—É—Ç)", 1},
	{"Sport", "–ó–∞–Ω—è—Ç–∏–µ —Å–ø–æ—Ä—Ç–æ–º (15 –º–∏–Ω—É—Ç)", 1},
	{"Pornhub", "–ü—Ä–∏–¥—É—à–∏—Ç—å –∑–º–µ—è (200 –º–∏–Ω—É—Ç)", 10},
}
var gRewards = Activities{
	{"Film", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º", 5},
	{"Food", "–°–æ–∂—Ä–∞—Ç—å —á–µ–≥–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–≥–æ", 7},
	{"Game", "–ù–∞–≥–Ω—É—Ç—å –Ω—É–±–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–µ", 10},
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã, —á—Ç–æ–±—ã –∫–æ–¥ –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–∏–π –±—ã–ª, –¥–∞ –∏ –ø–æ —É–º—É –∫–∞–∫-—Ç–æ
const (
	EMOJI_COIN         = "\U0001FA99"   // (coin)
	EMOJI_SMILE        = "\U0001F642"   // üôÇ
	EMOJI_SUNGLASSES   = "\U0001F60E"   // üòé
	EMOJI_WOW          = "\U0001F604"   // üòÑ
	EMOJI_DONT_KNOW    = "\U0001F937"   // ü§∑
	EMOJI_SAD          = "\U0001F63F"   // üòø
	EMOJI_BICEPS       = "\U0001F4AA"   // üí™
	EMOJI_BUTTON_START = "\U000025B6  " // ‚ñ∂
	EMOJI_BUTTON_END   = "  \U000025C0" // ‚óÄ

	BUTTON_TEXT_PRINT_INTRO       = EMOJI_BUTTON_START + "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" + EMOJI_BUTTON_END
	BUTTON_TEXT_SKIP_INTRO        = EMOJI_BUTTON_START + "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" + EMOJI_BUTTON_END
	BUTTON_TEXT_BALANCE           = EMOJI_BUTTON_START + "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å" + EMOJI_BUTTON_END
	BUTTON_TEXT_USEFUL_ACTIVITIES = EMOJI_BUTTON_START + "–ü–æ–ª–µ–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è" + EMOJI_BUTTON_END
	BUTTON_TEXT_REWARDS           = EMOJI_BUTTON_START + "–ù–∞–≥—Ä–∞–¥—ã" + EMOJI_BUTTON_END
	BUTTON_TEXT_PRINT_MENU        = EMOJI_BUTTON_START + "–û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ" + EMOJI_BUTTON_END

	BUTTON_CODE_PRINT_INTRO       = "print_intro"
	BUTTON_CODE_SKIP_INTRO        = "skip_intro"
	BUTTON_CODE_BALANCE           = "show_balance"
	BUTTON_CODE_USEFUL_ACTIVITIES = "show_useful_activities"
	BUTTON_CODE_REWARDS           = "show_rewards"
	BUTTON_CODE_PRINT_MENU        = "print_menu"

	UPDATE_CONFIG_TIMEOUT        = 60
	MAX_USER_COINS        uint16 = 500
)

type User struct {
	id    int
	name  string
	coins uint16
}

// Users –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Ç–µ—Ç-–∞-—Ç–µ—Ç, —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —é–∑–µ—Ä–æ–≤ –≤ —á–∞—Ç–∞—Ö, –≥–¥–µ –±—É–¥–µ—Ç –±–æ—Ç
type Users []*User

type Activity struct {
	code, name string
	coins      uint16
}
type Activities []*Activity

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
func init() {
	//–ó–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞
	envFilePath := "./go.env"

	err := godotenv.Load(envFilePath)
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}
	botToken := os.Getenv("BOT_TOKEN")
	if botToken == "" {
		fmt.Println("–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	} else {
		fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: %s\n", botToken)
	}
	gBot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	gBot.Debug = true

	log.Printf("Authorized on account %s", gBot.Self.UserName)
}

// –°—Ç–∞—Ä—Ç
func isStartMessage(update *tgbotapi.Update) bool {
	return update.Message != nil && update.Message.Text == "/start"
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (update) –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ CallbackQuery –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (callback data).
func isCallbackQuery(update *tgbotapi.Update) bool {
	return update.CallbackQuery != nil && update.CallbackQuery.Data != ""
}

// –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func delay(seconds uint8) {
	time.Sleep(time.Second * time.Duration(seconds))
}

// –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
func printSystemMessageWithDelay(delayInSec uint8, message string) {
	msg := tgbotapi.NewMessage(gChatId, message)
	gBot.Send(msg)
	delay(delayInSec)
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
func printIntro(update *tgbotapi.Update) {
	printSystemMessageWithDelay(2, "–ü—Ä–∏–≤–µ—Ç!"+EMOJI_SUNGLASSES)
	printSystemMessageWithDelay(2, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Ç—å –∑–∞–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º")
	printSystemMessageWithDelay(2, "–í—ã–ø–æ–ª–Ω—è–π –ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç–∫–∏ –∏ –ø–æ—Ç–æ–º —Ç—Ä–∞—Ç—å –∏—Ö")
	printSystemMessageWithDelay(3, "–ï—â–µ –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å —à–ª—è–ø–∞ –æ –±–æ—Ç–µ, –Ω–æ –º–Ω–µ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å")
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func getKeyboardRow(buttonText, buttonCode string) []tgbotapi.InlineKeyboardButton {
	return tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonCode))
}

// –í—ã–±–æ—Ä –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å intro
func askToPrintIntro() {
	msg := tgbotapi.NewMessage(gChatId, "–í–æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –ø–æ–π–º–µ—à—å —Å–º—ã—Å–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ—á–∏—Ç–∞–µ–º?")

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		getKeyboardRow(BUTTON_TEXT_PRINT_INTRO, BUTTON_CODE_PRINT_INTRO),
		getKeyboardRow(BUTTON_TEXT_SKIP_INTRO, BUTTON_CODE_SKIP_INTRO),
	)
	gBot.Send(msg)
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
func showMenu() {
	msg := tgbotapi.NewMessage(gChatId, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		getKeyboardRow(BUTTON_TEXT_BALANCE, BUTTON_CODE_BALANCE),
		getKeyboardRow(BUTTON_TEXT_USEFUL_ACTIVITIES, BUTTON_CODE_USEFUL_ACTIVITIES),
		getKeyboardRow(BUTTON_TEXT_REWARDS, BUTTON_CODE_REWARDS),
	)
	gBot.Send(msg)
}

// –ü–æ–∫–∞–∂–µ—Ç –±–∞–ª–∞–Ω—Å
func showBalance(user *User) {
	msg := fmt.Sprintf("%s, —Ç–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç (–±–æ–º–∂–∞—Ä–∞ —Å—Ä–∞–Ω—ã–π) %s \n–°–¥–µ–ª–∞–π —á—ë –Ω–∏—Ç—å –ø–æ–ª–µ–∑–Ω–æ–µ —É–∂–µ, –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π, —Ç—Ä—è–ø–∫–∞!", user.name, EMOJI_DONT_KNOW)
	if coins := user.coins; coins > 0 {
		msg = fmt.Sprintf("%s,—É —Ç–µ–±—è %d %s", user.name, EMOJI_COIN)
	}
	gBot.Send(tgbotapi.NewMessage(gChatId, msg))

	showMenu()

}

// –°–ª—É–∂–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (callback data) –≤ –æ–±—ä–µ–∫—Ç–µ update
func callbackQueryIsMissing(update *tgbotapi.Update) bool {
	return update.CallbackQuery == nil || update.CallbackQuery.From == nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func getUserFromUpdate(update *tgbotapi.Update) (user *User, found bool) {
	if callbackQueryIsMissing(update) {
		return
	}
	userId := update.CallbackQuery.From.ID
	for _, userInChat := range gUserInChat {
		if userId == userInChat.id {
			return userInChat, true
		}
	}
	return
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ update, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ CallbackQuery –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω—É–ª–µ–≤—ã–º, –∏ –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ gUserInChat
func storeUserFromUpdate(update *tgbotapi.Update) (user *User, found bool) {
	if callbackQueryIsMissing(update) {
		return
	}

	from := update.CallbackQuery.From
	user = &User{id: from.ID, name: strings.TrimSpace(from.FirstName + " " + from.LastName), coins: 0}
	gUserInChat = append(gUserInChat, user)
	return user, true
}

// –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞ –≤ Telegram. –û–Ω –±–µ—Ä–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (activities), —Å–æ–æ–±—â–µ–Ω–∏–µ (message) –∏ —Ñ–ª–∞–≥ isUseful, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ–ª–µ–∑–Ω–æ–µ –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ true, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç + –ø–µ—Ä–µ–¥ –º–æ–Ω–µ—Ç–∞–º–∏) –∏–ª–∏ –Ω–µ—Ç (–µ—Å–ª–∏ false, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç - –ø–µ—Ä–µ–¥ –º–æ–Ω–µ—Ç–∞–º–∏).
func showActivities(activities Activities, message string, isUseful bool) {
	activitiesButtonsRows := make([]([]tgbotapi.InlineKeyboardButton), 0, len(activities)+1)
	for _, activity := range activities {
		activityDescription := ""
		if isUseful {
			activityDescription = fmt.Sprintf("+ %d %s: %s", activity.coins, EMOJI_COIN, activity.name)
		} else {
			activityDescription = fmt.Sprintf("- %d %s: %s", activity.coins, EMOJI_COIN, activity.name)
		}
		activitiesButtonsRows = append(activitiesButtonsRows, getKeyboardRow(activityDescription, activity.code))
	}
	activitiesButtonsRows = append(activitiesButtonsRows, getKeyboardRow(BUTTON_TEXT_PRINT_MENU, BUTTON_CODE_PRINT_MENU))

	msg := tgbotapi.NewMessage(gChatId, message)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(activitiesButtonsRows...)
	gBot.Send(msg)
}

// –§—É–Ω–∫—Ü–∏—è showUsefulActivities –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é showActivities –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func showUsefulActivities() {
	showActivities(gUsefulActivities, "–°–¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é", true)
}

// –§—É–Ω–∫—Ü–∏—è showRewards –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é showActivities –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func showRewards() {
	showActivities(gRewards, "–ö—É–ø–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é", false)
}

// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–ø–∏—Å–∫–µ activities –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É choiceCode. –û–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ activities –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç choiceCode —Å activity.code –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ (activity) –∏ —Ñ–ª–∞–≥ true, —É–∫–∞–∑—ã–≤–∞—è –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil –∏ —Ñ–ª–∞–≥ false.
func findActivity(activities Activities, choiceCode string) (activity *Activity, found bool) {
	for _, activity := range activities {
		if choiceCode == activity.code {
			return activity, true
		}
	}
	return
}

// –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: activity, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏, –∏ user, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
func processUsefulActivity(activity *Activity, user *User) {
	errorMsg := ""
	if activity.coins == 0 {
		errorMsg = fmt.Sprintf(`—É –∞–∫—Ç–∏–≤–Ω–æ—Å–∏ %s –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å`, activity.name)
	} else if user.coins+activity.coins > MAX_USER_COINS {
		errorMsg = fmt.Sprintf(`—É —Ç–µ–±—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ %d %s`, MAX_USER_COINS, EMOJI_COIN)
	}
	resultMessage := ""
	if errorMsg != "" {
		resultMessage = fmt.Sprintf(`%s,–ø—Ä–æ—Å—Ç–∏, –Ω–æ %s %s –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`, user.name, errorMsg, EMOJI_SAD)
	} else {
		user.coins += activity.coins
		resultMessage = fmt.Sprintf(`%s, –¥–µ–π—Å—Ç–≤–∏–µ '%s' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! %d %s –ø–æ—Å—Ç—É–ø–∏–ª–æ —Ç–µ–±–µ –Ω–∞ —Å—á–µ—Ç. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! %s%s –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è %d %s`,
			user.name, activity.name, activity.coins, EMOJI_COIN, EMOJI_BICEPS, EMOJI_SUNGLASSES, user.coins, EMOJI_COIN,
		)
		gBot.Send(tgbotapi.NewMessage(gChatId, resultMessage))
	}
}

// –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–∞–≥—Ä–∞–¥—ã. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: activity, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ, –∏ user, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
func processReward(activity *Activity, user *User) {
	errorMsg := ""
	if activity.coins == 0 {
		errorMsg = fmt.Sprintf(`—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è %s –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å`, activity.name)
	} else if user.coins < activity.coins {
		errorMsg = fmt.Sprintf(`—É —Ç–µ–±—è —Å–µ–π—á–∞—Å %d %s. –¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å "%s" –∑–∞ %d %s`,
			user.coins, EMOJI_COIN, activity.name, activity.coins, EMOJI_COIN)
	}
	resultMessage := ""
	if errorMsg != "" {
		resultMessage = fmt.Sprintf("%s, –ø—Ä–æ—Å—Ç–∏, –Ω–æ %s %s —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—É—Å—Ç–ø–Ω–æ %s",
			user.name, errorMsg, EMOJI_SAD, EMOJI_DONT_KNOW)
	} else {
		user.coins -= activity.coins
		resultMessage = fmt.Sprintf(`%s, –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ "%s" –æ–ø–ª–∞—á–µ–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∞–π! %d %s –±—ã–ª–æ —Å–Ω—è—Ç–æ —Å —Ç–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è %d %s`,
			user.name, activity.name, activity.coins, EMOJI_COIN, user.coins, EMOJI_COIN)
	}
	gBot.Send(tgbotapi.NewMessage(gChatId, resultMessage))
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±–æ—Ç–∞ –≤ Telegram
func updateProcessing(update *tgbotapi.Update) {
	user, found := getUserFromUpdate(update)
	if !found {
		user, found = storeUserFromUpdate(update)
		if !found {
			gBot.Send(tgbotapi.NewMessage(gChatId, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
			return
		}
	}
	choiceCode := update.CallbackQuery.Data
	log.Printf("[%T] %s", time.Now(), choiceCode)

	switch choiceCode {
	case BUTTON_CODE_BALANCE:
		showBalance(user)
	case BUTTON_CODE_USEFUL_ACTIVITIES:
		showUsefulActivities()
	case BUTTON_CODE_REWARDS:
		showRewards()
	case BUTTON_CODE_PRINT_INTRO:
		printIntro(update)
		showMenu()
	case BUTTON_CODE_SKIP_INTRO:
		showMenu()
	case BUTTON_CODE_PRINT_MENU:
		showMenu()
	default:
		if usefulActivity, found := findActivity(gUsefulActivities, choiceCode); found {
			processUsefulActivity(usefulActivity, user)

			delay(2)
			showUsefulActivities()
			return
		}

		if reward, found := findActivity(gRewards, choiceCode); found {
			processReward(reward, user)

			delay(2)
			showRewards()
			return
		}
		log.Printf(`[%T]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ "%s"!)`, time.Now(), choiceCode)
		msg := fmt.Sprintf("%s,–ø—Ä–æ—Å—Ç–∏,—è –Ω–µ –∑–Ω–∞—é –∫–æ–¥", user.name)
		gBot.Send(tgbotapi.NewMessage(gChatId, msg))
	}
}

func main() {

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = UPDATE_CONFIG_TIMEOUT

	updates, err := gBot.GetUpdatesChan(updateConfig)
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞")
	}

	for update := range updates {
		if isCallbackQuery(&update) {
			updateProcessing(&update)
		} else if isStartMessage(&update) {

			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
			gChatId = update.Message.Chat.ID
			askToPrintIntro()
		}

	}
}
